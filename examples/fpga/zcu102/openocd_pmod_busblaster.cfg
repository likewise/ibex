adapter_khz     10

interface ftdi
transport select jtag

# BusBlaster v2 (tested with v2.5)
ftdi_device_desc "Dual RS232-HS"
ftdi_vid_pid 0x0403 0x6010

ftdi_layout_init 0x0c08 0x0f1b
ftdi_layout_signal nTRST -data 0x0100 -noe 0x0400
ftdi_layout_signal nSRST -data 0x0200 -noe 0x0800

# Not really required, but makes communication a bit more robust
#ftdi_tdo_sample_edge falling

# Use Channel A (0), channel B (1) is taken by Xilinx JTAG
ftdi_channel 0

# FT2232 doesn't support open drain GPIO for reset pins
#reset_config srst_push_pull trst_push_pull
#reset_config trst_push_pull

# required because we do not have the SRST on the RISC-V DM side, only TRST
# This brings us at least to this point:
# Info : JTAG tap: riscv.cpu tap/device found: 0x04f5384d (mfg: 0x426 (Google Inc), part: 0x4f53, ver: 0x0)
reset_config trst_only

adapter_nsrst_delay 100
jtag_ntrst_delay 100


set _CHIPNAME riscv

jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0x04f5384d

set _TARGETNAME $_CHIPNAME.cpu


# select the HART to debug with the coreid switch
target create $_TARGETNAME riscv -chain-position $_TARGETNAME -coreid 0
#-rtos hwthread
 

gdb_report_data_abort enable
#gdb_report_register_access_error enable

#riscv set_reset_timeout_sec 120
#riscv set_command_timeout_sec 120

# prefer to use sba for system bus access
#riscv set_prefer_sba off
#riscv set_mem_access sysbus

scan_chain

init
halt
echo "Ready for Remote Connections"
